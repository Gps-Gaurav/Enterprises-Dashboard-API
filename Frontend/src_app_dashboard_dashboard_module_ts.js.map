{"version":3,"file":"src_app_dashboard_dashboard_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;AAI8D;;;;;;;AAOvD,MAAM,kBAAkB;IAM7B,YAAoB,iBAAmC,EAC7C,WAA+B,EAC/B,gBAAiC;QAFvB,sBAAiB,GAAjB,iBAAiB,CAAkB;QAC7C,gBAAW,GAAX,WAAW,CAAoB;QAC/B,qBAAgB,GAAhB,gBAAgB,CAAiB;QAEzC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;QACzB,IAAI,CAAC,aAAa,EAAE,CAAC;IAEvB,CAAC;IATD,eAAe,KAAK,CAAC;IAWrB,aAAa;QACX,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,CAAC,QAAa,EAAE,EAAE;YAC9D,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;YACxB,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;QAEvB,CAAC,EAAC,CAAC,KAAU,EAAE,EAAE;;YACf,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;YACxB,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACrB,IAAG,WAAK,CAAC,KAAK,0CAAE,OAAO,EAAC;gBACxB,IAAI,CAAC,eAAe,GAAG,WAAK,CAAC,KAAK,0CAAE,OAAO,CAAC;aAC3C;iBACG;gBACF,IAAI,CAAC,eAAe,GAAG,mFAA4B,CAAC;aACrD;YACD,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,IAAI,CAAC,eAAe,EAAC,4EAAqB,CAAC,CAAC;QAEjF,CAAC,CACA;IACH,CAAC;;oFAjCU,kBAAkB;gHAAlB,kBAAkB;QCX/B,uEAAM;QAEO,iFAAsB;QAAA,4DAAO;QAExC,gEAAI;QAEJ,yEAAiB;QAIS,0EAAc;QAAA,4DAAK;QACrC,yEAAkB;QAAA,wDAAkB;QAAA,4DAAK;QACzC,qEAAG;QAAwD,0EAAc;QAAA,4DAAS;QAItF,0EAAoB;QAGI,yEAAa;QAAA,4DAAK;QACpC,yEAAkB;QAAA,wDAAiB;QAAA,4DAAK;QACxC,qEAAG;QAAuD,yEAAa;QAAA,4DAAS;QAKpF,0EAAoB;QAGI,sEAAU;QAAA,4DAAK;QACjC,yEAAkB;QAAA,wDAAc;QAAA,4DAAK;QACrC,qEAAG;QAA+C,sEAAU;QAAA,4DAAS;;QApBvD,2DAAkB;QAAlB,4GAAkB;QAShB,2DAAiB;QAAjB,2GAAiB;QAUf,2DAAc;QAAd,wGAAc;;;;;;;;;;;;;;;;;;;;;;;AC7BC;AACA;AACS;AACG;AACL;AACK;;;AAWpD,MAAM,eAAe;;8EAAf,eAAe;4GAAf,eAAe;gHARjB;YACP,yDAAY;YACZ,mEAAc;YACd,kEAAgB;YAChB,kEAAqB,CAAC,+DAAe,CAAC;SACvC;mIAGU,eAAe,mBAFX,oEAAkB,aAL/B,yDAAY;QACZ,mEAAc;QACd,kEAAgB;;;;;;;;;;;;;;;;ACVuC;AAEpD,MAAM,eAAe,GAAW,CAAC;QACtC,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,oEAAkB;KAC9B,CAAC,CAAC;;;;;;;;;;;;;;;;;;ACL0D;;;AAKtD,MAAM,gBAAgB;IAK3B,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAFlC,QAAG,GAAW,yEAAkB,CAAC;IAEK,CAAC;IAE/C,UAAU;QACR,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,GAAC,qBAAqB,CAAC;IAC5D,CAAC;;gFATU,gBAAgB;iHAAhB,gBAAgB,WAAhB,gBAAgB,mBAFf,MAAM","sources":["./src/app/dashboard/dashboard.component.ts","./src/app/dashboard/dashboard.component.html","./src/app/dashboard/dashboard.module.ts","./src/app/dashboard/dashboard.routing.ts","./src/app/services/dashboard.service.ts"],"sourcesContent":["import { Component, AfterViewInit } from '@angular/core';\nimport { DashboardService } from '../services/dashboard.service';\nimport { NgxUiLoaderService } from 'ngx-ui-loader';\nimport { SnackbarService } from '../services/snackbar.service';\nimport { GlobalConstants } from '../shared/global-constrants';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements AfterViewInit {\n  responseMessage: any;\n  data: any;\n\n  ngAfterViewInit() { }\n\n  constructor(private dashboardServices: DashboardService,\n    private ngxServices: NgxUiLoaderService,\n    private snackbarServices: SnackbarService) {\n\n    this.ngxServices.start();\n    this.dashboardData();\n\n  }\n\n  dashboardData() {\n    this.dashboardServices.getDetails().subscribe((response: any) => {\n      this.ngxServices.stop();\n      this.data = response;\n\n    },(error: any) => {\n      this.ngxServices.stop();\n      console.error(error);\n      if(error.error?.message){\n      this.responseMessage = error.error?.message;\n      }\n      else{\n        this.responseMessage = GlobalConstants.genericError;\n      }\n      this.snackbarServices.openSnackbar(this.responseMessage,GlobalConstants.error);\n      \n    }\n    )\n  }\n\n}\n","<body>\n  <mat-card>\n    <b><span>Enterprises Dashboaard</span></b>\n  </mat-card>\n  <hr>\n  <br>\n  <div class=\"row\">\n    <div class=\"column\">\n      <div class=\"card\">\n        <div class=\"container\">\n          <h2 class=\"title\">Total Category</h2>\n          <h1 class=\"title\">{{data?.category}}</h1>\n          <p><button class=\"button\" routerLink=\"/cafe/view-category\">View Category </button></p>\n        </div>\n      </div>\n    </div>\n      <div class=\"column\">\n        <div class=\"card\">\n          <div class=\"container\">\n            <h2 class=\"title\">Total Product</h2>\n            <h1 class=\"title\">{{data?.product}}</h1>\n            <p><button class=\"button\" routerLink=\"/cafe/view-product\">View Product </button></p>\n          </div>\n        </div>\n      </div>\n\n        <div class=\"column\">\n          <div class=\"card\">\n            <div class=\"container\">\n              <h2 class=\"title\">Total Bill</h2>\n              <h1 class=\"title\">{{data?.bill}}</h1>\n              <p><button class=\"button\" routerLink=\"/cafe/bill\">View Bill </button></p>\n            </div>\n          </div>\n        </div>\n\n      </div>\n</body>\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { DashboardComponent } from './dashboard.component';\nimport { DashboardRoutes } from './dashboard.routing';\nimport { MaterialModule } from '../shared/material-module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MaterialModule,\n    FlexLayoutModule,\n    RouterModule.forChild(DashboardRoutes)\n  ],\n  declarations: [DashboardComponent]\n})\nexport class DashboardModule { }\n","import { Routes } from '@angular/router';\n\nimport { DashboardComponent } from './dashboard.component';\n\nexport const DashboardRoutes: Routes = [{\n  path: '',\n  component: DashboardComponent\n}];\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DashboardService {\n\n\n  private url: string = environment.apiUrl;\n\n  constructor(private httpClient: HttpClient) { }\n\n  getDetails() {\n    return this.httpClient.get(this.url+\"/dashboard/details/\")\n  }\n}\n"],"names":[],"sourceRoot":"webpack:///"}